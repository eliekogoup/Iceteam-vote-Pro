import { createClient } from './supabase-auth'

// V√©rifier si une √©dition est termin√©e (tous les membres ont vot√©)
export async function checkEditionStatus(editionId: number) {
  const supabase = createClient()
  
  try {
    console.log(`üìä V√©rification du statut de l'√©dition ${editionId}...`);
    
    // D'abord r√©cup√©rer l'√©dition pour conna√Ætre son groupe
    const { data: edition, error: editionError } = await supabase
      .from('editions')
      .select('group_id')
      .eq('id', editionId)
      .single()
    
    if (editionError || !edition) {
      console.error('‚ùå √âdition non trouv√©e:', editionError);
      return { isComplete: false, totalMembers: 0, totalVoters: 0, progress: 0 }
    }

    // R√©cup√©rer tous les membres actifs du groupe de cette √©dition
    const { data: groupMembers, error: membersError } = await supabase
      .from('member_groups')
      .select(`
        member_id,
        members!inner(id, is_active)
      `)
      .eq('group_id', edition.group_id)
    
    if (membersError) {
      console.error('‚ùå Erreur r√©cup√©ration membres du groupe:', membersError);
      return { isComplete: false, totalMembers: 0, totalVoters: 0, progress: 0 }
    }

    // Filtrer les membres actifs
    const activeMembers = groupMembers?.filter(mg => 
      mg.members && mg.members.is_active !== false
    ) || []
    
    console.log(`üë• Membres actifs du groupe ${edition.group_id}:`, activeMembers.length);

    // R√©cup√©rer tous les votes pour cette √©dition (compter les votants uniques)
    const { data: votes, error: votesError } = await supabase
      .from('votes')
      .select('voter_id')
      .eq('edition_id', editionId)
    
    if (votesError) {
      console.error('‚ùå Erreur r√©cup√©ration votes:', votesError);
      return { isComplete: false, totalMembers: activeMembers.length, totalVoters: 0, progress: 0 }
    }

    // Cr√©er un Set des membres qui ont vot√© pour √©viter les doublons
    const votersSet = new Set(votes?.map(vote => vote.voter_id) || [])
    
    const totalMembers = activeMembers.length
    const totalVoters = votersSet.size
    const progress = totalMembers > 0 ? (totalVoters / totalMembers) * 100 : 0
    
    console.log(`üìä Statut √©dition ${editionId}: ${totalVoters}/${totalMembers} votes (${Math.round(progress)}%)`);
    
    return {
      isComplete: totalMembers > 0 && totalVoters >= totalMembers,
      totalMembers,
      totalVoters,
      progress
    }
  } catch (error) {
    console.error('Erreur lors de la v√©rification du statut de l\'√©dition:', error)
    return {
      isComplete: false,
      totalMembers: 0,
      totalVoters: 0,
      progress: 0
    }
  }
}

// V√©rifier si un membre a d√©j√† vot√© pour une √©dition
export async function checkUserVoteStatus(editionId: number, memberEmail: string) {
  const supabase = createClient()
  
  try {
    // R√©cup√©rer l'ID du membre √† partir de son email
    const { data: member, error: memberError } = await supabase
      .from('members')
      .select('id')
      .eq('email', memberEmail)
      .single()
    
    if (memberError || !member) {
      return { hasVoted: false, memberId: null }
    }

    // V√©rifier si ce membre a vot√© pour cette √©dition
    const { data: vote, error: voteError } = await supabase
      .from('votes')
      .select('id')
      .eq('edition_id', editionId)
      .eq('member_id', member.id)
      .single()
    
    return {
      hasVoted: !voteError && !!vote,
      memberId: member.id
    }
  } catch (error) {
    console.error('Erreur lors de la v√©rification du vote de l\'utilisateur:', error)
    return { hasVoted: false, memberId: null }
  }
}

// V√©rifier si un membre a d√©j√† vot√© pour une √©dition (par ID de membre)
export async function checkUserVoteStatusByMemberId(editionId: number, memberId: number) {
  const supabase = createClient()
  
  try {
    console.log(`üó≥Ô∏è V√©rification vote pour membre ${memberId} sur √©dition ${editionId}...`);
    
    // V√©rifier si ce membre a vot√© pour cette √©dition
    const { data: votes, error: voteError } = await supabase
      .from('votes')
      .select('id')
      .eq('edition_id', editionId)
      .eq('voter_id', memberId) // Utiliser voter_id au lieu de member_id
    
    const hasVoted = !voteError && votes && votes.length > 0;
    
    console.log(`üó≥Ô∏è Membre ${memberId} a vot√© pour √©dition ${editionId}: ${hasVoted ? 'OUI' : 'NON'}`);
    
    return {
      hasVoted,
      memberId: memberId
    }
  } catch (error) {
    console.error('Erreur lors de la v√©rification du vote de l\'utilisateur:', error)
    return { hasVoted: false, memberId: memberId }
  }
}

// R√©cup√©rer les √©ditions avec leur statut pour un utilisateur
export async function getEditionsWithStatus(userEmail: string) {
  const supabase = createClient()
  
  try {
    console.log('üîç Recherche du membre pour email:', userEmail);
    
    // D'abord v√©rifier la connexion √† la base de donn√©es
    const { data: testQuery, error: testError } = await supabase
      .from('members')
      .select('count')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå Erreur de connexion √† la base de donn√©es:', testError);
      return []
    }
    
    console.log('‚úÖ Connexion √† la base de donn√©es OK');
    
    // D'abord r√©cup√©rer les informations du membre
    const { data: member, error: memberError } = await supabase
      .from('members')
      .select('id, email, nom, prenom')
      .eq('email', userEmail)
      .single()
    
    if (memberError || !member) {
      console.warn('‚ùå Membre non trouv√© pour email:', userEmail, memberError);
      
      // Debugging: lister tous les emails disponibles
      const { data: allMembers } = await supabase
        .from('members')
        .select('email, nom, prenom')
        .limit(10)
      
      console.log('üìã Premiers emails dans la base:', allMembers?.map(m => `${m.email} (${m.prenom} ${m.nom})`));
      
      // Essayer une recherche floue pour voir si l'email existe sous une autre forme
      const emailParts = userEmail.split('@')[0].toLowerCase();
      const { data: fuzzyMembers } = await supabase
        .from('members')
        .select('email, nom, prenom')
        .or(`email.ilike.%${emailParts}%,nom.ilike.%${emailParts}%,prenom.ilike.%${emailParts}%`)
        .limit(5)
      
      console.log('üîç Recherche floue pour des emails similaires:', fuzzyMembers);
      
      return []
    }

    console.log('‚úÖ Membre trouv√©:', member);

    // R√©cup√©rer les groupes du membre via la table de liaison
    const { data: memberGroups, error: groupsError } = await supabase
      .from('member_groups')
      .select(`
        group_id,
        groups(id, name)
      `)
      .eq('member_id', member.id)
    
    if (groupsError) {
      console.error('‚ùå Erreur r√©cup√©ration groupes:', groupsError);
      return []
    }

    console.log('üìä R√©sultat brut member_groups:', memberGroups);

    // Extraire les IDs des groupes du membre
    const groupIds = memberGroups?.map((mg: any) => mg.group_id) || []
    
    if (groupIds.length === 0) {
      console.warn('‚ö†Ô∏è Aucun groupe trouv√© pour le membre:', userEmail);
      
      // Debugging: v√©rifier si la table member_groups a des donn√©es
      const { data: allMemberGroups } = await supabase
        .from('member_groups')
        .select('member_id, group_id')
        .limit(10)
      
      console.log('üìä Toutes les associations member_groups:', allMemberGroups);
      
      // V√©rifier si des groupes existent
      const { data: allGroups } = await supabase
        .from('groups')
        .select('id, name')
        .limit(10)
      
      console.log('üë• Tous les groupes disponibles:', allGroups);
      
      return []
    }

    console.log(`üë• Groupes du membre [${member.id}]:`, groupIds);

    // R√©cup√©rer les √©ditions de tous les groupes du membre
    console.log('üìä Tentative de r√©cup√©ration des √©ditions...');
    
    const { data: editions, error: editionsError } = await supabase
      .from('editions')
      .select('id, title, description, group_id, no_self_vote')
      .in('group_id', groupIds)  // Filtrer par tous les groupes du membre
      .order('id', { ascending: false })
    
    if (editionsError) {
      console.error('‚ùå Erreur r√©cup√©ration √©ditions:', editionsError);
      return []
    }

    console.log(`üìä √âditions trouv√©es pour les groupes [${groupIds.join(', ')}]:`, editions?.length || 0);

    // Si aucune √©dition trouv√©e, debug suppl√©mentaire
    if (!editions || editions.length === 0) {
      const { data: allEditions } = await supabase
        .from('editions')
        .select('id, title, description, group_id')
        .limit(10)
      
      console.log('üìä Toutes les √©ditions dans la base:', allEditions);
      return []
    }

    // Pour chaque √©dition, v√©rifier le statut
    const editionsWithStatus = await Promise.all(
      (editions || []).map(async (edition) => {
        const status = await checkEditionStatus(edition.id)
        const userVote = await checkUserVoteStatusByMemberId(edition.id, member.id)
        
        return {
          ...edition,
          ...status,
          userHasVoted: userVote.hasVoted,
          canViewResults: status.isComplete || userVote.hasVoted
        }
      })
    )

    return editionsWithStatus
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des √©ditions:', error)
    return []
  }
}